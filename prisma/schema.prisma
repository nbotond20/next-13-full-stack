datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  passwordHash  String?   @db.String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Movie         Movie[]
  role          Role      @default(USER)
  gym           String?   @db.String
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  date      DateTime
  overview  String
  imgPath   String
  rating    Float
  voteCount Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
}

model Rating {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  rating  Float
  movieId String
  userId  String
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  movieId   String
  userId    String
  date      DateTime
  parentId  String?
  avatar    String
  name      String
  voteCount Int
  likedBy   String[] // This is a list of user ids + their vote in string form i.e. "userId:vote"
}
