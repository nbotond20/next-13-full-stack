datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  passwordHash  String?   @db.Text
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Movie         Movie[]
  Rating        Rating[]
  Comment       Comment[]
  Like          Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id        String    @id @default(cuid())
  title     String
  date      DateTime
  overview  String
  imgPath   String
  rating    Float
  voteCount Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  Rating    Rating[]
  Comment   Comment[]
}

model Rating {
  id      String @id @default(cuid())
  rating  Float
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
}

model Comment {
  id      String @id @default(cuid())
  text    String
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  Like    Like[]
}

model Like {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
}
